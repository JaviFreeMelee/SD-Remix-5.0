#injection point is at 8025BB40 in 1.02

#free registers r9,r10,r15,r18

#r0 = stage ID

#First, OR all of the controller data:
lis r10, 0x8046
ori r10, r10, 0xB108
li r9, 0
li r15, 0
CONTROLLER_LOOP:
lhzx r18, r10, r9
or r15, r15, r18
addi r9, r9, 0xC
cmpwi r9, 0x25
ble CONTROLLER_LOOP
#r15 is now the combined controller data of the 4 players
#freed r9 for use

LIST_READ_START:
mflr r10 #copy the link register before branching
bl xtAslData
mflr r9 #r9 is now ptr to ASL data
mtlr r10 #move back the lr backup
li r10, 1 #set up for loop

LIST_READ_LOOP:
lwz r18, 0(r9)
cmpwi r18, 0 #dec. for DEAD, because in hex it makes the assembler error (why?)
beq RETURN_NORMAL #reached end of list, exit

lhz r18, 0(r9) #load stage ID
cmpw r18, r0 #compare to current selected stage
bne LIST_SKIP_ENTRY #not equal, skip entry

lhz r18, 2(r9) #load button combo
cmpw r18, r15 #compare to current inputs
bne LIST_SKIP_ENTRY #not equal, skip entry

lhz r0, 4(r9) #load new stage ID
lbz r18, 7(r9) #load new stage filename
lis r10, 0x803F
ori r10, r10, 0xA3D0
stb r18, 0(r10) #store into 803FA3D0

b RETURN

##############################

xtAslData:
blrl
#put your ASL entries here
# entry 1 #Castle Siege Blue
.hword 0x14A  # stage id
.hword 0x040  # button combo
.hword 0x149  # replacement stage id
.byte 0x47  # idk
.byte "r"   # stage filename byte
.align 2
# entry 2 #Castle Siege Red
.hword 0x14A  # stage id
.hword 0x020  # button combo
.hword 0x148  # replacement stage id
.byte 0x47  # idk
.byte "r"   # stage filename byte
.align 2
# entry 3 #Brawl FD
.hword 0x20  # stage id
.hword 0x040  # button combo
.hword 0x14D  # replacement stage id
.byte 0x47  # idk
.byte "b"   # stage filename byte
.align 2
# entry 4 #Vs Mewtwo FD
.hword 0x20  # stage id
.hword 0x020  # button combo
.hword 0x14E  # replacement stage id
.byte 0x47  # idk
.byte "m"   # stage filename byte
.align 2
# entry 5 #Mount Olympus
.hword 0x14B  # stage id
.hword 0x040  # button combo
.hword 0x14C  # replacement stage id
.byte 0x47  # idk
.byte "o"   # stage filename byte
.align 2
# end
.long 0x0

##############################

LIST_SKIP_ENTRY:
addi r10, r10, 1 #r10++
addi r9, r9, 8 #r9 += 8
b LIST_READ_LOOP

RETURN_NORMAL:
lis r18, 0
li r18, 0x00 #set r18 to 00, which means "load normal file"
lis r10, 0x803F
ori r10, r10, 0xA3D0
stb r18, 0(r10) #store into 803FA3D0
#we're done, let the code die in peace
RETURN:
sth    r0, 0x001E (r3) # execute replaced instruction

